{
  "title": "POSDataProcessor",
  "description": "The `POSDataProcessor` script is designed to process Point-of-Sale (POS) sales data from an input CSV file, applying tax calculations, organizing sales categories (e.g., `Admission`, `Donation`, `gift sale`), and generating a structured CSV output file suitable for financial systems such as QuickBooks.",
  "sections": [
    {
      "title": "Overview",
      "content": "The script processes sales data for various categories, including admissions, gift sales, and donations. It automatically calculates sales tax for applicable categories, organizes the data by date, and writes it to a structured CSV output file. The script uses a class-based approach for modularity and maintainability."
    },
    {
      "title": "Class Structure",
      "content": "The script is structured around the `POSDataProcessor` class, which encapsulates all the logic for processing the sales data."
    },
    {
      "title": "POSDataProcessor Class",
      "content": {
        "attributes": [
          {
            "name": "input_csv",
            "description": "Path to the input CSV file containing the POS sales data."
          },
          {
            "name": "output_csv",
            "description": "Path to the output CSV file where processed data will be written."
          },
          {
            "name": "input_df",
            "description": "Pandas DataFrame containing the loaded sales data."
          }
        ],
        "methods": [
          {
            "name": "__init__(self, input_csv: str, output_csv: str)",
            "description": "Initializes the class with the input and output file paths."
          },
          {
            "name": "clean_amount(self, value: any) -> float",
            "description": "Cleans the input values by removing non-numeric characters and converting them to float."
          },
          {
            "name": "load_data(self)",
            "description": "Loads the input CSV data into a Pandas DataFrame."
          },
          {
            "name": "process(self)",
            "description": "The main function that orchestrates the sales processing and writing the results to the output CSV file."
          },
          {
            "name": "process_admissions(self, writer: csv.writer, date: str, date_data: pd.Series) -> float",
            "description": "Processes admissions sales, calculates the net amount and sales tax, and writes the results."
          },
          {
            "name": "process_gift_sales(self, writer: csv.writer, date: str, date_data: pd.Series) -> float",
            "description": "Processes gift sales, calculates the sales tax, and writes the results."
          },
          {
            "name": "process_sales_tax(self, writer: csv.writer, date: str, total_sales_tax: float)",
            "description": "Writes the total sales tax to the output file if applicable."
          },
          {
            "name": "process_donations(self, writer: csv.writer, date: str, date_data: pd.Series)",
            "description": "Processes donations (no tax applied) and writes the results."
          },
          {
            "name": "write_record(self, writer: csv.writer, date: str, category: str, amount: float)",
            "description": "Writes a sales record (formatted for QuickBooks) to the output CSV file."
          }
        ]
      }
    },
    {
      "title": "Input",
      "content": "The input to the script is a CSV file containing the POS sales data. The expected structure of the input file is as follows:",
      "example": {
        "table": {
          "headers": ["Category", "Date 1", "Date 2", "..."],
          "rows": [
            ["Admission", "$100.00", "$150.00", "..."],
            ["gift sale", "$50.00", "$70.00", "..."],
            ["Donation", "$20.00", "$30.00", "..."]
          ]
        }
      }
    },
    {
      "title": "Input Example",
      "example": "Category,2024-08-01,2024-08-02\nAdmission,$100.00,$150.00\ngift sale,$50.00,$70.00\nDonation,$20.00,$30.00"
    },
    {
      "title": "Output",
      "content": "The output is a CSV file formatted for QuickBooks (or a similar financial system) with the following structure:",
      "table_structure": {
        "headers": [
          "Deposit To",
          "Date",
          "Memo",
          "Received From",
          "From Account",
          "Line Memo",
          "Check No.",
          "Pmt Meth.",
          "Class",
          "Amount",
          "Less Cash Back",
          "Cash back Accnt.",
          "Cash back Memo"
        ],
        "example_row": [
          "POS Clearing",
          "2024-08-01",
          "gross sales",
          "POS",
          "POS Income",
          "admission",
          "",
          "",
          "POS:admissions",
          "100.00",
          "",
          "",
          ""
        ]
      }
    },
    {
      "title": "Usage",
      "content": "To run the `POSDataProcessor` script, use the following command:",
      "command": "python pos_data_processor.py <input_csv> [-o <output_csv>]",
      "parameters": [
        {
          "name": "<input_csv>",
          "description": "(Required) The path to the CSV file containing sales data."
        },
        {
          "name": "-o, --output",
          "description": "(Optional) The path to the output CSV file. If not provided, the script will generate an output file named `input_filename_output.csv`."
        }
      ],
      "example_usage": "python pos_data_processor.py sales_data.csv -o formatted_sales.csv"
    },
    {
      "title": "Important Notes",
      "points": [
        "Sales Tax Handling: The script automatically calculates and applies an 8.6% sales tax to applicable categories (e.g., `Admission`, `gift sale`). You can adjust the tax rate in the script if needed.",
        "Customizable Output: The output is designed for QuickBooks, but it can be modified for other financial systems. Adjustments can be made to the fields like 'Deposit To', 'Memo', and 'Class' as needed.",
        "Error Handling: The script includes error handling for file reading issues and ensures that any non-numeric values in the input are safely ignored."
      ]
    },
    {
      "title": "Conclusion",
      "content": "The `POSDataProcessor` script simplifies the process of converting POS sales data into a structured format suitable for financial reporting. Its class-based structure makes it easy to extend and customize, while built-in features like automatic sales tax calculation make it ideal for preparing data for QuickBooks or similar systems."
    }
  ]
}

